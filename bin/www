#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('suptracked:server');
var http = require('http');
var config = require('../config');
var sqlite3 = require('sqlite3').verbose();
startTime = new Date();

/**
 * Ensure database is up and running
 */
if (process.env.NODE_ENV == "testing") {
  db = new sqlite3.Database(':memory:');
} else {
  db = new sqlite3.Database(config.db.location);
}

//init the DB with our schema
db.get("SELECT name FROM sqlite_master WHERE type='table' AND name='experiences'",
  function(err, rows) {
    if (err !== null) {
      console.log(err);
    } else if (rows === undefined) {
      console.log("Initializing database...")
      db.run('CREATE TABLE "users" ' +
        '("id" INTEGER PRIMARY KEY AUTOINCREMENT, ' +
        'firstmane TEXT, ' +
        'lastname TEXT, ' +
        'username TEXT, ' +
        'email TEXT, ' +
        'password TEXT, ' +
        'emergcontact TEXT, ' +
        'phone TEXT, ' +
        'daysback INTEGER, ' +
        'favoritecount INTEGER, ' +
        'admin INTEGER)');

      db.run('CREATE TABLE "experiences" ' +
        '("id" INTEGER PRIMARY KEY AUTOINCREMENT, ' +
        'date TEXT, ' +
        'ttime INTEGER' +
        'title TEXT, ' +
        'location TEXT, ' +
        'notes TEXT, ' +
        'panicmsg TEXT, ' +
        'rating_id INTEGER, ' +
        'owner INTEGER)');

      db.run('CREATE TABLE "consumptions" ' +
        '("id" INTEGER PRIMARY KEY AUTOINCREMENT, ' +
        'date TEXT, ' +
        'experience INTEGER' +
        'count REAL, ' +
        'drug_id INTEGER, ' +
        'method_id INTEGER, ' +
        'owner INTEGER)');

      db.run('CREATE TABLE "drugs" ' +
        '("id" INTEGER PRIMARY KEY AUTOINCREMENT, ' +
        'drugname TEXT, ' +
        'unit TEXT, ' +
        'notes TEXT, ' +
        'classification TEXT, ' +
        'family TEXT, ' +
        'rarity TEXT, ' +
        'owner INTEGER)');
    }

    console.log("Database initialized.");
  });

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(config.general.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  console.log('SupTracked is listening on ' + bind);
}
